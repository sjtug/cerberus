package web

import (
	"context"

	"github.com/caddyserver/caddy/v2/modules/caddyhttp"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/sjtug/cerberus/core"
)

type contextKeyType int

const (
	BaseURLCtxKey contextKeyType = iota
	VersionCtxKey
	LocaleCtxKey
	ManifestCtxKey
	MailCtxKey
	TelemetryCtxKey
)

type TelemetryConfig struct {
	DSN         string
	Environment string
	SampleRate  float64
}

templ T(key string, args ...any) {
	{ i18n.T(ctx, key, args...) }
}

templ UnsafeT(key string, args ...any) {
	@templ.Raw(i18n.T(ctx, key, args...))
}

func GetBaseURL(ctx context.Context) string {
	return ctx.Value(BaseURLCtxKey).(string)
}

func GetVersion(ctx context.Context) string {
	return ctx.Value(VersionCtxKey).(string)
}

func GetLocale(ctx context.Context) string {
	return ctx.Value(LocaleCtxKey).(string)
}

func GetManifest(ctx context.Context) Manifest {
	return ctx.Value(ManifestCtxKey).(Manifest)
}

func GetMail(ctx context.Context) string {
	return ctx.Value(MailCtxKey).(string)
}

func GetTelemetryConfig(ctx context.Context) TelemetryConfig {
	return ctx.Value(TelemetryCtxKey).(TelemetryConfig)
}

func GetRequestID(ctx context.Context) string {
	return caddyhttp.GetVar(ctx, core.VarReqID).(string)
}

func AssetPath(ctx context.Context, path string) string {
	return caddyhttp.SanitizedPathJoin(GetBaseURL(ctx)+"/static", GetManifest(ctx)[path].File)
}

templ Base(title string, header string) {
	<!DOCTYPE html>
	<html lang="en" class="noscript-hidden">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<link rel="stylesheet" href={ AssetPath(ctx, "global.css") }/>
		</head>
		<body class="min-h-screen flex flex-col items-center justify-center p-4 bg-[#fff8e7]">
			<div class="text-center text-lg my-auto max-w-2xl w-full px-4">
				<h1 id="title" class="text-4xl font-bold mb-6">{ header }</h1>
				{ children... }
			</div>
			<footer class="text-center space-y-3 mt-6">
				<div class="text-gray-500 text-sm space-y-1">
					<p>
						@UnsafeT("footer.author", i18n.M{
							"cerberus": `<a href="https://github.com/SJTUG/cerberus" class="text-amber-600 hover:text-amber-700">Cerberus</a>`,
							"sjtug":    `<a href="https://sjtug.org" class="text-amber-600 hover:text-amber-700">SJTUG</a>`})
					</p>
					<p>
						@UnsafeT("footer.upstream", i18n.M{
							"anubis":  `<a href="https://github.com/TecharoHQ/anubis" class="text-amber-600 hover:text-amber-700">Anubis</a>`,
							"techaro": `<a href="https://techaro.lol" class="text-amber-600 hover:text-amber-700">Techaro</a>`})
					</p>
				</div>
			</footer>
			<!-- Telemetry Consent Dialog (hidden by default) -->
			<div id="telemetry-consent-overlay" class="hidden fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center z-[10000]">
				<div class="bg-white rounded-lg p-6 max-w-lg mx-5 shadow-lg">
					<h3 class="text-xl font-bold mb-4">@T("telemetry.dialog.title")</h3>
					<p class="mb-4 text-gray-700">
						@T("telemetry.dialog.description")
					</p>
					<p class="mb-5 text-sm text-gray-600">
						@T("telemetry.dialog.data_collected")
					</p>
					<ul class="mb-5 ml-5 list-disc text-sm text-gray-600 space-y-1">
						<li>@T("telemetry.dialog.item_browser")</li>
						<li>@T("telemetry.dialog.item_error")</li>
						<li>@T("telemetry.dialog.item_no_personal")</li>
					</ul>
					<div class="flex gap-3 justify-end">
						<button id="telemetry-decline" class="px-4 py-2 border border-gray-300 rounded hover:bg-gray-50 text-sm">
							@T("telemetry.dialog.decline")
						</button>
						<button id="telemetry-accept" class="px-4 py-2 bg-[#b79ecf] text-white rounded hover:bg-[#a88dc0] text-sm">
							@T("telemetry.dialog.accept")
						</button>
					</div>
				</div>
			</div>
		</body>
	</html>
}

templ Challenge(challenge string, difficulty int, nonce uint32, ts int64, signature string) {
	{{
		challengeInput := struct {
			Challenge  string `json:"challenge"`
			Difficulty int    `json:"difficulty"`
			Nonce      uint32 `json:"nonce"`
			TS         int64  `json:"ts"`
			Signature  string `json:"signature"`
		}{challenge, difficulty, nonce, ts, signature}

		baseURL := GetBaseURL(ctx)
		locale := GetLocale(ctx)
		telemetryConfig := GetTelemetryConfig(ctx)
		metaInput := struct {
			BaseURL       string  `json:"baseURL"`
			Locale        string  `json:"locale"`
			TelemetryDSN  string  `json:"telemetryDSN,omitempty"`
			TelemetryEnv  string  `json:"telemetryEnv,omitempty"`
			TelemetryRate float64 `json:"telemetryRate,omitempty"`
			RequestID     string  `json:"requestID"`
		}{baseURL, locale, telemetryConfig.DSN, telemetryConfig.Environment, telemetryConfig.SampleRate, GetRequestID(ctx)}
	}}
	<div id="main-area" class="hidden">
		<img id="mascot" src={ AssetPath(ctx, "img/mascot-puzzle.png") } alt="Cute anime mascot character" class="mx-auto p-4 mb-2 max-w-64"/>
		<div id="status-container">
			<p id="status" class="text-gray-700 mb-1">status</p>
			<p id="metrics" class="text-gray-700 mb-1">metrics</p>
			<p id="progress-message" class="text-gray-700 mb-2">message</p>
			<!-- Progress Bar (hidden in success state) -->
			<div id="progress-container" class="w-48 h-6 bg-white rounded-full border-2 border-[#b79ecf] p-1 mt-2 mb-4 mx-auto">
				<div id="progress-bar" class="h-full w-[60%] bg-[#b79ecf] rounded-full transition-all duration-300"></div>
			</div>
		</div>
		<details class="mb-4">
			<summary class="cursor-pointer text-gray-600 hover:text-gray-800">
				@T("challenge.why_seeing")
			</summary>
			<div class="mt-2 text-base text-gray-600 space-y-2">
				<p>
					@UnsafeT("challenge.why_seeing_body.part_1", i18n.M{
						"cerberus": `<a href="https://github.com/SJTUG/cerberus" class="text-amber-600 hover:text-amber-700">Cerberus</a>`,
					})
				</p>
				<p>
					@UnsafeT("challenge.why_seeing_body.part_2", i18n.M{
						"anubis":  `<a href="https://github.com/TecharoHQ/anubis" class="text-amber-600 hover:text-amber-700">Anubis</a>`,
						"techaro": `<a href="https://techaro.lol" class="text-amber-600 hover:text-amber-700">Techaro</a>`,
					})
				</p>
				<p>
					@UnsafeT("challenge.why_seeing_body.part_3", i18n.M{
						"jshelter": `<a href="https://jshelter.org/" class="text-amber-600 hover:text-amber-700">JShelter</a>`,
					})
				</p>
			</div>
		</details>
	</div>
	<div id="message-area" class="noscript">
		@Error(i18n.T(ctx, "error.must_enable_js"), i18n.T(ctx, "error.apologize_please_enable_js"), "")
	</div>
	<script async defer type="module" id="challenge-script" x-meta={ templ.JSONString(metaInput) } x-challenge={ templ.JSONString(challengeInput) } src={ AssetPath(ctx, "js/main.mjs") }></script>
}

templ Error(message string, description string, code string) {
	<img id="mascot" src={ AssetPath(ctx, "img/mascot-fail.png") } alt="Cute anime mascot character with a sad face" class="mx-auto p-4 mb-2 max-w-64"/>
	<p id="message" class="text-gray-700 mb-2">{ message }</p>
	<div class="text-gray-600 text-base mb-4 space-y-2">
		<p id="description">{ description }</p>
		if code != "" {
			<p id="code" class="text-gray-600 text-sm font-mono bg-gray-100 border border-gray-300 rounded px-2 py-1 inline-block">
				{ code }
			</p>
		} else {
			<p id="code" class="text-gray-600 text-sm font-mono bg-gray-100 border border-gray-300 rounded px-2 py-1 inline-block hidden!"></p>
		}
	</div>
	<details class="mb-4">
		<summary class="cursor-pointer text-gray-600 hover:text-gray-800">
			@T("error.what_should_i_do")
		</summary>
		<div class="mt-2 text-base text-gray-600 space-y-2">
			<p>
				@T("error.do_not_reload_too_often")
			</p>
			<p>
				@UnsafeT("error.contact_us", i18n.M{"mail": `<a href="mailto:` + GetMail(ctx) + `" class="text-amber-600 hover:text-amber-700">` + GetMail(ctx) + `</a>`})
			</p>
			<p class="text-gray-600 text-sm font-mono bg-gray-100 border border-gray-300 rounded px-2 py-1 inline-block">
				Request ID: { GetRequestID(ctx) }
			</p>
		</div>
	</details>
}
